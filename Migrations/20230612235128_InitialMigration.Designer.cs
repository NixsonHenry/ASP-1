// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PAS.Data;

#nullable disable

namespace PAS.Migrations
{
    [DbContext(typeof(PASDbContext))]
    [Migration("20230612235128_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourProfesseur", b =>
                {
                    b.Property<int>("CoursCourId")
                        .HasColumnType("int");

                    b.Property<int>("ProfesseursProfesseurId")
                        .HasColumnType("int");

                    b.HasKey("CoursCourId", "ProfesseursProfesseurId");

                    b.HasIndex("ProfesseursProfesseurId");

                    b.ToTable("CourProfesseur", (string)null);
                });

            modelBuilder.Entity("PAS.Models.AnneeAcademique", b =>
                {
                    b.Property<int>("AnneeAcademiqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnneeAcademiqueId"));

                    b.Property<string>("AnneeScolaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Statut")
                        .HasColumnType("bit");

                    b.HasKey("AnneeAcademiqueId");

                    b.ToTable("AnneeAcademiques");
                });

            modelBuilder.Entity("PAS.Models.Classe", b =>
                {
                    b.Property<int>("ClasseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClasseId"));

                    b.Property<int>("AnneeAcademiqueId")
                        .HasColumnType("int");

                    b.Property<int?>("EtudiantId")
                        .HasColumnType("int");

                    b.Property<string>("Niveau")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClasseId");

                    b.HasIndex("AnneeAcademiqueId");

                    b.HasIndex("EtudiantId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("PAS.Models.Cour", b =>
                {
                    b.Property<int>("CourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourId"));

                    b.Property<int>("ClasseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EtudiantId")
                        .HasColumnType("int");

                    b.Property<string>("NomCours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfesseurId")
                        .HasColumnType("int");

                    b.HasKey("CourId");

                    b.HasIndex("ClasseId");

                    b.HasIndex("EtudiantId");

                    b.ToTable("Cours");
                });

            modelBuilder.Entity("PAS.Models.CourEtudiant", b =>
                {
                    b.Property<int>("CourId")
                        .HasColumnType("int");

                    b.Property<int>("EtudiantId")
                        .HasColumnType("int");

                    b.HasKey("CourId", "EtudiantId");

                    b.HasIndex("EtudiantId");

                    b.ToTable("CourEtudiant", (string)null);
                });

            modelBuilder.Entity("PAS.Models.Etudiant", b =>
                {
                    b.Property<int>("EtudiantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EtudiantId"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Maladie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatutMatrimonial")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EtudiantId");

                    b.ToTable("Etudiants");
                });

            modelBuilder.Entity("PAS.Models.Heure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfesseurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfesseurId");

                    b.ToTable("Heures");
                });

            modelBuilder.Entity("PAS.Models.Jour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfesseurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfesseurId");

                    b.ToTable("Jours");
                });

            modelBuilder.Entity("PAS.Models.Professeur", b =>
                {
                    b.Property<int>("ProfesseurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfesseurId"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfesseurId");

                    b.ToTable("Professeurs");
                });

            modelBuilder.Entity("CourProfesseur", b =>
                {
                    b.HasOne("PAS.Models.Cour", null)
                        .WithMany()
                        .HasForeignKey("CoursCourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PAS.Models.Professeur", null)
                        .WithMany()
                        .HasForeignKey("ProfesseursProfesseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PAS.Models.Classe", b =>
                {
                    b.HasOne("PAS.Models.AnneeAcademique", "AnneeAcademique")
                        .WithMany("Classes")
                        .HasForeignKey("AnneeAcademiqueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PAS.Models.Etudiant", null)
                        .WithMany("Classes")
                        .HasForeignKey("EtudiantId");

                    b.Navigation("AnneeAcademique");
                });

            modelBuilder.Entity("PAS.Models.Cour", b =>
                {
                    b.HasOne("PAS.Models.Classe", "Classe")
                        .WithMany("Cours")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PAS.Models.Etudiant", null)
                        .WithMany("Cours")
                        .HasForeignKey("EtudiantId");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("PAS.Models.CourEtudiant", b =>
                {
                    b.HasOne("PAS.Models.Cour", "Cour")
                        .WithMany("CourEtudiants")
                        .HasForeignKey("CourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PAS.Models.Etudiant", "Etudiant")
                        .WithMany("CourEtudiants")
                        .HasForeignKey("EtudiantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cour");

                    b.Navigation("Etudiant");
                });

            modelBuilder.Entity("PAS.Models.Heure", b =>
                {
                    b.HasOne("PAS.Models.Professeur", "Professeur")
                        .WithMany("Heures")
                        .HasForeignKey("ProfesseurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Professeur");
                });

            modelBuilder.Entity("PAS.Models.Jour", b =>
                {
                    b.HasOne("PAS.Models.Professeur", "Professeur")
                        .WithMany("Jours")
                        .HasForeignKey("ProfesseurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Professeur");
                });

            modelBuilder.Entity("PAS.Models.AnneeAcademique", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("PAS.Models.Classe", b =>
                {
                    b.Navigation("Cours");
                });

            modelBuilder.Entity("PAS.Models.Cour", b =>
                {
                    b.Navigation("CourEtudiants");
                });

            modelBuilder.Entity("PAS.Models.Etudiant", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("CourEtudiants");

                    b.Navigation("Cours");
                });

            modelBuilder.Entity("PAS.Models.Professeur", b =>
                {
                    b.Navigation("Heures");

                    b.Navigation("Jours");
                });
#pragma warning restore 612, 618
        }
    }
}
